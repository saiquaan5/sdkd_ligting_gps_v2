/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: common_proto.proto */

#ifndef PROTOBUF_C_common_5fproto_2eproto__INCLUDED
#define PROTOBUF_C_common_5fproto_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Account Account;
typedef struct _CPUParameter CPUParameter;
typedef struct _CPUScheduler CPUScheduler;
typedef struct _Device Device;
typedef struct _SignParam SignParam;
typedef struct _StationLaneLightConfig StationLaneLightConfig;
typedef struct _MeterItem MeterItem;
typedef struct _Station Station;
typedef struct _Accessory Accessory;
typedef struct _CardConfig CardConfig;
typedef struct _MTFCPhaseGateConfig MTFCPhaseGateConfig;
typedef struct _HMTime HMTime;
typedef struct _ActiveLamp ActiveLamp;
typedef struct _OneSideLampTime OneSideLampTime;
typedef struct _OneCycleLampTime OneCycleLampTime;
typedef struct _CycleLampForm CycleLampForm;
typedef struct _OneTimeline OneTimeline;
typedef struct _DayTimeLine DayTimeLine;
typedef struct _TimeLampForm TimeLampForm;
typedef struct _DayLampForm DayLampForm;
typedef struct _LaneState LaneState;
typedef struct _DeviceState DeviceState;
typedef struct _StatusCode StatusCode;


/* --- enums --- */

typedef enum _DeviceType {
  /*
   *CPU loại AC
   */
  DEVICE_TYPE__MTFC_AC = 0,
  /*
   *CPU DC 24V
   */
  DEVICE_TYPE__MTFC_DC_24 = 1,
  /*
   *CPU DC 36V
   */
  DEVICE_TYPE__MTFC_DC_36 = 2,
  /*
   *CPU DC 48V
   */
  DEVICE_TYPE__MTFC_DC_48 = 3,
  /*
   *CPU năng lượng mặt trời
   */
  DEVICE_TYPE__MTFC_SOLAR = 4,
  DEVICE_TYPE__MTFC_SMS_CONTROLLER = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DEVICE_TYPE)
} DeviceType;
typedef enum _AccountRole {
  ACCOUNT_ROLE__NONE = 0,
  ACCOUNT_ROLE__ADMIN = 1,
  ACCOUNT_ROLE__OPERATOR = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ACCOUNT_ROLE)
} AccountRole;
typedef enum _ConnectionState {
  CONNECTION_STATE__CONNECTION_OFFLINE = 0,
  CONNECTION_STATE__CONNECTION_ONLINE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONNECTION_STATE)
} ConnectionState;
typedef enum _MTFCMainWorkState {
  /*
   *Cpu đang ở chế độ off chỉ chớp vàng (pin_switch_on ở mức LOW)
   */
  MTFCMAIN_WORK_STATE__MTFC_STATE_off = 0,
  /*
   *CPu đang hoạt động chế độ auto. các ngõ vào switch t[1-4] không tích cực
   */
  MTFCMAIN_WORK_STATE__MTFC_STATE_AUTO = 1,
  /*
   *CPU đang chế độ điều
   */
  MTFCMAIN_WORK_STATE__MTFC_STATE_MANUAL = 2,
  /*
   *Hoạt động chế độ kết nối đường sắt có tín hiệu pin_switch_railway ở mức HIGH
   */
  MTFCMAIN_WORK_STATE__MTFC_STATE_RAILWAY = 3,
  /*
   *Hoạt động chế độ đi bộ có tín hiệu pin_switch_walking ở mức HIGH
   */
  MTFCMAIN_WORK_STATE__MTFC_STATE_WALKING = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MTFCMAIN_WORK_STATE)
} MTFCMainWorkState;
typedef enum _PinSwitchProfile {
  /*
   *[LSB] Tín hiệu on/off: On Cpu hoạt động, Off Cpu chỉ chạy chớp vàng
   */
  PIN_SWITCH_PROFILE__PIN_SWITCH_ONOFF = 0,
  /*
   *Tín hiệu kết nối đường sắt
   */
  PIN_SWITCH_PROFILE__PIN_SWITCH_RAILWAY = 1,
  /*
   *Tín hiệu cho chế độ đi bộ
   */
  PIN_SWITCH_PROFILE__PIN_SWITCH_WALKING = 2,
  /*
   *Tín hiệu chọn tuyến 1
   */
  PIN_SWITCH_PROFILE__PIN_SWITCH_T1 = 3,
  /*
   *Tín hiệu chọn tuyến 2
   */
  PIN_SWITCH_PROFILE__PIN_SWITCH_T2 = 4,
  /*
   *Tín hiệu chọn tuyến 3
   */
  PIN_SWITCH_PROFILE__PIN_SWITCH_T3 = 5,
  /*
   *Tín hiệu chọn tuyến 4
   */
  PIN_SWITCH_PROFILE__PIN_SWITCH_T4 = 6,
  /*
   *[MSB]
   */
  PIN_SWITCH_PROFILE__PIN_SWITCH_OP = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PIN_SWITCH_PROFILE)
} PinSwitchProfile;
/*
 *Cấu trúc qui định thứ tự bit tín hiệu xuất ra đèn trong 1 byte
 */
typedef enum _PinOutProfile {
  /*
   *Đèn xanh [LSB]
   */
  PIN_OUT_PROFILE__PIN_GREEN = 0,
  /*
   *Đèn vàng
   */
  PIN_OUT_PROFILE__PIN_YELLOW = 1,
  /*
   *Đèn đỏ
   */
  PIN_OUT_PROFILE__PIN_RED = 2,
  /*
   *Đèn đi bộ xanh
   */
  PIN_OUT_PROFILE__PIN_WALKING_GREEN = 3,
  /*
   *Đèn đi bộ đỏ
   */
  PIN_OUT_PROFILE__PIN_WALKING_RED = 4,
  /*
   *Cổng option 1 (tạm thời chưa dùng đến)
   */
  PIN_OUT_PROFILE__PIN_OPTION_1 = 5,
  /*
   *Cổng option 2 (tạm thời chưa dùng đến)
   */
  PIN_OUT_PROFILE__PIN_OPTION_2 = 6,
  /*
   *Cổng option 3 (tạm thời chưa dùng đến) [MSB]
   */
  PIN_OUT_PROFILE__PIN_OPTION_3 = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PIN_OUT_PROFILE)
} PinOutProfile;
typedef enum _TrafficLightState {
  TRAFFIC_LIGHT_STATE__TRAFFIC_LIGHT_STATE_NONE = 0,
  TRAFFIC_LIGHT_STATE__TRAFFIC_LIGHT_STATE_GREEN = 1,
  TRAFFIC_LIGHT_STATE__TRAFFIC_LIGHT_STATE_RED = 2,
  TRAFFIC_LIGHT_STATE__TRAFFIC_LIGHT_STATE_YELLOW = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRAFFIC_LIGHT_STATE)
} TrafficLightState;
typedef enum _WalkingState {
  WALKING_STATE__WALKING_STATE_OFF = 0,
  WALKING_STATE__WALKING_STATE_GREEN = 1,
  WALKING_STATE__WALKING_STATE_RED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WALKING_STATE)
} WalkingState;

/* --- messages --- */

struct  _Account
{
  ProtobufCMessage base;
  char *userid;
  char *username;
  AccountRole role;
  char *createdate;
  protobuf_c_boolean iscurrentaccount;
};
#define ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&account__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, ACCOUNT_ROLE__NONE, (char *)protobuf_c_empty_string, 0 }


struct  _CPUParameter
{
  ProtobufCMessage base;
};
#define CPUPARAMETER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cpuparameter__descriptor) \
     }


struct  _CPUScheduler
{
  ProtobufCMessage base;
};
#define CPUSCHEDULER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cpuscheduler__descriptor) \
     }


struct  _Device
{
  ProtobufCMessage base;
  char *deviceid;
  char *devicetype;
  DeviceState *devicestate;
  char *stationname;
  char *hardwareid;
  uint32_t numphase;
  float lat;
  float log;
};
#define DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0 }


struct  _SignParam
{
  ProtobufCMessage base;
  uint32_t channel;
  uint32_t x;
  uint32_t y;
  char *text;
};
#define SIGN_PARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sign_param__descriptor) \
    , 0, 0, 0, (char *)protobuf_c_empty_string }


struct  _StationLaneLightConfig
{
  ProtobufCMessage base;
  SignParam *countdown;
  SignParam *trafficlight;
  SignParam *walking;
  SignParam *railway;
  SignParam *turnright;
  SignParam *goahead;
  SignParam *turnleft;
  uint32_t index;
  SignParam *label;
};
#define STATION_LANE_LIGHT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&station_lane_light_config__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL }


struct  _MeterItem
{
  ProtobufCMessage base;
  uint32_t index;
  char *time;
  double data;
  char *label;
};
#define METER_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_item__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


struct  _Station
{
  ProtobufCMessage base;
  char *stationid;
  char *name;
  Device *device;
  float stationlat;
  float stationlong;
  uint32_t numphase;
  size_t n_lanelightconfig;
  StationLaneLightConfig **lanelightconfig;
  char *background;
  char *hardwareid;
  char *firmware;
  char *createdate;
  uint32_t numcard;
  uint32_t errorstatus;
  char *errorstatusnote;
  ConnectionState connectionstate;
  protobuf_c_boolean ison;
  char *activebegin;
  char *activeend;
  size_t n_meteritems;
  MeterItem **meteritems;
  char *deviceid;
  uint32_t mode;
};
#define STATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&station__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0, 0, 0, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string, CONNECTION_STATE__CONNECTION_OFFLINE, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0 }


struct  _Accessory
{
  ProtobufCMessage base;
  char *id;
  char *name;
  char *model;
  char *madeby;
  char *position;
  char *installedpos;
  char *installeddate;
  char *status;
  char *stationid;
};
#define ACCESSORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&accessory__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _CardConfig
{
  ProtobufCMessage base;
  char *serialnumber;
  uint32_t imei;
  uint32_t phase;
  uint32_t israilwayenabled;
};
#define CARD_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&card_config__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0 }


struct  _MTFCPhaseGateConfig
{
  ProtobufCMessage base;
  size_t n_pin;
  uint32_t *pin;
};
#define MTFCPHASE_GATE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mtfcphase_gate_config__descriptor) \
    , 0,NULL }


struct  _HMTime
{
  ProtobufCMessage base;
  uint32_t hour;
  uint32_t minute;
};
#define HMTIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hmtime__descriptor) \
    , 0, 0 }


struct  _ActiveLamp
{
  ProtobufCMessage base;
  /*
   *Thời gian bắt đầu
   */
  HMTime *begin;
  /*
   *Thời gian kết thúc
   */
  HMTime *end;
};
#define ACTIVE_LAMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&active_lamp__descriptor) \
    , NULL, NULL }


struct  _OneSideLampTime
{
  ProtobufCMessage base;
  /*
   *Thời gian đèn xanh (1)
   */
  uint32_t t_green;
  /*
   *Thời gian đèn vàng(2)
   */
  uint32_t t_yellow;
  /*
   *Thời gian đèn đỏ(3)
   */
  uint32_t t_red;
  /*
   *Mốc thời gian bắt đầu đèn xanh
   */
  uint32_t t_start_green;
  /*
   *Mốc thời gian kết thúc đèn xanh
   */
  uint32_t t_end_green;
  /*
   *Mốc thời gian bắt đầu tín hiệu đèn vàng
   */
  uint32_t t_start_yellow;
  /*
   *Mốc thời gian kết thúc tín hiệu đèn vàng
   */
  uint32_t t_end_yellow;
};
#define ONE_SIDE_LAMP_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&one_side_lamp_time__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _OneCycleLampTime
{
  ProtobufCMessage base;
  /*
   *Số lượng pha điều khiển tín hiệu đèn
   */
  uint32_t num_side_used;
  /*
   *Tổng chu kỳ tín hiệu đèn
   */
  uint32_t period_crossroads;
  /*
   *Thời gian xanh vàng đỏ của từng pha trong 1 chốt tín hiệu
   */
  size_t n_side;
  OneSideLampTime **side;
  /*
   *Thời gian giải tỏa
   */
  uint32_t clearance_time_crossroads;
  protobuf_c_boolean ismodified;
};
#define ONE_CYCLE_LAMP_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&one_cycle_lamp_time__descriptor) \
    , 0, 0, 0,NULL, 0, 0 }


struct  _CycleLampForm
{
  ProtobufCMessage base;
  size_t n_index;
  OneCycleLampTime **index;
};
#define CYCLE_LAMP_FORM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cycle_lamp_form__descriptor) \
    , 0,NULL }


struct  _OneTimeline
{
  ProtobufCMessage base;
  /*
   *Thời gian bắt đầu áp dụng chiến lược đèn không sử dụng 255: 255
   */
  HMTime *t_begin_apply;
  /*
   *Chỉ số biểu mẫu  [0-31]
   */
  uint32_t index_cycle_form;
};
#define ONE_TIMELINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&one_timeline__descriptor) \
    , NULL, 0 }


struct  _DayTimeLine
{
  ProtobufCMessage base;
  /*
   *Mỗi biễu mấu thời gian có MAX_TIME_LINE mốc thời gian
   */
  size_t n_selectpoint;
  OneTimeline **selectpoint;
};
#define DAY_TIME_LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&day_time_line__descriptor) \
    , 0,NULL }


struct  _TimeLampForm
{
  ProtobufCMessage base;
  /*
   *Số lượng max biểu mẫu thời gian
   */
  size_t n_index;
  DayTimeLine **index;
};
#define TIME_LAMP_FORM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&time_lamp_form__descriptor) \
    , 0,NULL }


struct  _DayLampForm
{
  ProtobufCMessage base;
  size_t n_index;
  uint32_t *index;
};
#define DAY_LAMP_FORM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&day_lamp_form__descriptor) \
    , 0,NULL }


struct  _LaneState
{
  ProtobufCMessage base;
  WalkingState walkingstate;
  TrafficLightState lightstate;
  uint32_t counter;
};
#define LANE_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lane_state__descriptor) \
    , WALKING_STATE__WALKING_STATE_OFF, TRAFFIC_LIGHT_STATE__TRAFFIC_LIGHT_STATE_NONE, 0 }


/*
 * Gói gửi 1 giây 
 */
struct  _DeviceState
{
  ProtobufCMessage base;
  ConnectionState connectionstate;
  /*
   *Số pha đèn
   */
  uint32_t num_phase;
  /*
   *Dữ liệu ngõ ra đèn quy định theo _pin_out_profile_
   */
  size_t n_signal;
  uint32_t *signal;
  /*
   *Dũ liệu ngõ ra đèn ánh xạ quy định theo _pin_out_profile_
   */
  size_t n_mapping;
  uint32_t *mapping;
  /*
   *Biến đếm ngược từng pha đèn Pha [1 - 8]
   */
  size_t n_countdown;
  uint32_t *countdown;
  /*
   * Thời gian thực trên CPU định dạng Unix epoch
   */
  uint32_t rtc_epoch;
  /*
   * Ngõ ra sensor detect ngõ ra quy định theo _pin_out_profile_ = 0 hoạt động bình thường =1 lỗi
   */
  size_t n_output_sensor;
  uint32_t *output_sensor;
  /*
   * tín hiệu đường sắt #0 có tác động
   */
  uint32_t walking_signal;
  /*
   *Tín hiệu đi bộ #0 có tác động
   */
  uint32_t railway_signal;
  /*
   *Chế độ cpu đang hoạt động _mtfc_main_work_state_
   */
  MTFCMainWorkState cpu_active_mode;
  /*
   *Tín hiệu điều khiển tại tủ _pin_switch_profile_
   */
  uint32_t input_hardware;
  /*
   *Tín hiệu điều khiển tại app _pin_switch_profile_
   */
  uint32_t input_software;
  /*
   *(1)
   */
  uint32_t idx_time_form;
  /*
   *(2)
   */
  uint32_t idx_timeline;
  /*
   *(3)
   */
  uint32_t idx_cycle_form;
  /*
   * Device không quan tâm message này
   */
  size_t n_lanestate;
  LaneState **lanestate;
};
#define DEVICE_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_state__descriptor) \
    , CONNECTION_STATE__CONNECTION_OFFLINE, 0, 0,NULL, 0,NULL, 0,NULL, 0, 0,NULL, 0, 0, MTFCMAIN_WORK_STATE__MTFC_STATE_off, 0, 0, 0, 0, 0, 0,NULL }


struct  _StatusCode
{
  ProtobufCMessage base;
  char *message;
  uint32_t code;
};
#define STATUS_CODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&status_code__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


/* Account methods */
void   account__init
                     (Account         *message);
size_t account__get_packed_size
                     (const Account   *message);
size_t account__pack
                     (const Account   *message,
                      uint8_t             *out);
size_t account__pack_to_buffer
                     (const Account   *message,
                      ProtobufCBuffer     *buffer);
Account *
       account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   account__free_unpacked
                     (Account *message,
                      ProtobufCAllocator *allocator);
/* CPUParameter methods */
void   cpuparameter__init
                     (CPUParameter         *message);
size_t cpuparameter__get_packed_size
                     (const CPUParameter   *message);
size_t cpuparameter__pack
                     (const CPUParameter   *message,
                      uint8_t             *out);
size_t cpuparameter__pack_to_buffer
                     (const CPUParameter   *message,
                      ProtobufCBuffer     *buffer);
CPUParameter *
       cpuparameter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cpuparameter__free_unpacked
                     (CPUParameter *message,
                      ProtobufCAllocator *allocator);
/* CPUScheduler methods */
void   cpuscheduler__init
                     (CPUScheduler         *message);
size_t cpuscheduler__get_packed_size
                     (const CPUScheduler   *message);
size_t cpuscheduler__pack
                     (const CPUScheduler   *message,
                      uint8_t             *out);
size_t cpuscheduler__pack_to_buffer
                     (const CPUScheduler   *message,
                      ProtobufCBuffer     *buffer);
CPUScheduler *
       cpuscheduler__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cpuscheduler__free_unpacked
                     (CPUScheduler *message,
                      ProtobufCAllocator *allocator);
/* Device methods */
void   device__init
                     (Device         *message);
size_t device__get_packed_size
                     (const Device   *message);
size_t device__pack
                     (const Device   *message,
                      uint8_t             *out);
size_t device__pack_to_buffer
                     (const Device   *message,
                      ProtobufCBuffer     *buffer);
Device *
       device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device__free_unpacked
                     (Device *message,
                      ProtobufCAllocator *allocator);
/* SignParam methods */
void   sign_param__init
                     (SignParam         *message);
size_t sign_param__get_packed_size
                     (const SignParam   *message);
size_t sign_param__pack
                     (const SignParam   *message,
                      uint8_t             *out);
size_t sign_param__pack_to_buffer
                     (const SignParam   *message,
                      ProtobufCBuffer     *buffer);
SignParam *
       sign_param__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sign_param__free_unpacked
                     (SignParam *message,
                      ProtobufCAllocator *allocator);
/* StationLaneLightConfig methods */
void   station_lane_light_config__init
                     (StationLaneLightConfig         *message);
size_t station_lane_light_config__get_packed_size
                     (const StationLaneLightConfig   *message);
size_t station_lane_light_config__pack
                     (const StationLaneLightConfig   *message,
                      uint8_t             *out);
size_t station_lane_light_config__pack_to_buffer
                     (const StationLaneLightConfig   *message,
                      ProtobufCBuffer     *buffer);
StationLaneLightConfig *
       station_lane_light_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   station_lane_light_config__free_unpacked
                     (StationLaneLightConfig *message,
                      ProtobufCAllocator *allocator);
/* MeterItem methods */
void   meter_item__init
                     (MeterItem         *message);
size_t meter_item__get_packed_size
                     (const MeterItem   *message);
size_t meter_item__pack
                     (const MeterItem   *message,
                      uint8_t             *out);
size_t meter_item__pack_to_buffer
                     (const MeterItem   *message,
                      ProtobufCBuffer     *buffer);
MeterItem *
       meter_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_item__free_unpacked
                     (MeterItem *message,
                      ProtobufCAllocator *allocator);
/* Station methods */
void   station__init
                     (Station         *message);
size_t station__get_packed_size
                     (const Station   *message);
size_t station__pack
                     (const Station   *message,
                      uint8_t             *out);
size_t station__pack_to_buffer
                     (const Station   *message,
                      ProtobufCBuffer     *buffer);
Station *
       station__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   station__free_unpacked
                     (Station *message,
                      ProtobufCAllocator *allocator);
/* Accessory methods */
void   accessory__init
                     (Accessory         *message);
size_t accessory__get_packed_size
                     (const Accessory   *message);
size_t accessory__pack
                     (const Accessory   *message,
                      uint8_t             *out);
size_t accessory__pack_to_buffer
                     (const Accessory   *message,
                      ProtobufCBuffer     *buffer);
Accessory *
       accessory__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   accessory__free_unpacked
                     (Accessory *message,
                      ProtobufCAllocator *allocator);
/* CardConfig methods */
void   card_config__init
                     (CardConfig         *message);
size_t card_config__get_packed_size
                     (const CardConfig   *message);
size_t card_config__pack
                     (const CardConfig   *message,
                      uint8_t             *out);
size_t card_config__pack_to_buffer
                     (const CardConfig   *message,
                      ProtobufCBuffer     *buffer);
CardConfig *
       card_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   card_config__free_unpacked
                     (CardConfig *message,
                      ProtobufCAllocator *allocator);
/* MTFCPhaseGateConfig methods */
void   mtfcphase_gate_config__init
                     (MTFCPhaseGateConfig         *message);
size_t mtfcphase_gate_config__get_packed_size
                     (const MTFCPhaseGateConfig   *message);
size_t mtfcphase_gate_config__pack
                     (const MTFCPhaseGateConfig   *message,
                      uint8_t             *out);
size_t mtfcphase_gate_config__pack_to_buffer
                     (const MTFCPhaseGateConfig   *message,
                      ProtobufCBuffer     *buffer);
MTFCPhaseGateConfig *
       mtfcphase_gate_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mtfcphase_gate_config__free_unpacked
                     (MTFCPhaseGateConfig *message,
                      ProtobufCAllocator *allocator);
/* HMTime methods */
void   hmtime__init
                     (HMTime         *message);
size_t hmtime__get_packed_size
                     (const HMTime   *message);
size_t hmtime__pack
                     (const HMTime   *message,
                      uint8_t             *out);
size_t hmtime__pack_to_buffer
                     (const HMTime   *message,
                      ProtobufCBuffer     *buffer);
HMTime *
       hmtime__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hmtime__free_unpacked
                     (HMTime *message,
                      ProtobufCAllocator *allocator);
/* ActiveLamp methods */
void   active_lamp__init
                     (ActiveLamp         *message);
size_t active_lamp__get_packed_size
                     (const ActiveLamp   *message);
size_t active_lamp__pack
                     (const ActiveLamp   *message,
                      uint8_t             *out);
size_t active_lamp__pack_to_buffer
                     (const ActiveLamp   *message,
                      ProtobufCBuffer     *buffer);
ActiveLamp *
       active_lamp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   active_lamp__free_unpacked
                     (ActiveLamp *message,
                      ProtobufCAllocator *allocator);
/* OneSideLampTime methods */
void   one_side_lamp_time__init
                     (OneSideLampTime         *message);
size_t one_side_lamp_time__get_packed_size
                     (const OneSideLampTime   *message);
size_t one_side_lamp_time__pack
                     (const OneSideLampTime   *message,
                      uint8_t             *out);
size_t one_side_lamp_time__pack_to_buffer
                     (const OneSideLampTime   *message,
                      ProtobufCBuffer     *buffer);
OneSideLampTime *
       one_side_lamp_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   one_side_lamp_time__free_unpacked
                     (OneSideLampTime *message,
                      ProtobufCAllocator *allocator);
/* OneCycleLampTime methods */
void   one_cycle_lamp_time__init
                     (OneCycleLampTime         *message);
size_t one_cycle_lamp_time__get_packed_size
                     (const OneCycleLampTime   *message);
size_t one_cycle_lamp_time__pack
                     (const OneCycleLampTime   *message,
                      uint8_t             *out);
size_t one_cycle_lamp_time__pack_to_buffer
                     (const OneCycleLampTime   *message,
                      ProtobufCBuffer     *buffer);
OneCycleLampTime *
       one_cycle_lamp_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   one_cycle_lamp_time__free_unpacked
                     (OneCycleLampTime *message,
                      ProtobufCAllocator *allocator);
/* CycleLampForm methods */
void   cycle_lamp_form__init
                     (CycleLampForm         *message);
size_t cycle_lamp_form__get_packed_size
                     (const CycleLampForm   *message);
size_t cycle_lamp_form__pack
                     (const CycleLampForm   *message,
                      uint8_t             *out);
size_t cycle_lamp_form__pack_to_buffer
                     (const CycleLampForm   *message,
                      ProtobufCBuffer     *buffer);
CycleLampForm *
       cycle_lamp_form__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cycle_lamp_form__free_unpacked
                     (CycleLampForm *message,
                      ProtobufCAllocator *allocator);
/* OneTimeline methods */
void   one_timeline__init
                     (OneTimeline         *message);
size_t one_timeline__get_packed_size
                     (const OneTimeline   *message);
size_t one_timeline__pack
                     (const OneTimeline   *message,
                      uint8_t             *out);
size_t one_timeline__pack_to_buffer
                     (const OneTimeline   *message,
                      ProtobufCBuffer     *buffer);
OneTimeline *
       one_timeline__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   one_timeline__free_unpacked
                     (OneTimeline *message,
                      ProtobufCAllocator *allocator);
/* DayTimeLine methods */
void   day_time_line__init
                     (DayTimeLine         *message);
size_t day_time_line__get_packed_size
                     (const DayTimeLine   *message);
size_t day_time_line__pack
                     (const DayTimeLine   *message,
                      uint8_t             *out);
size_t day_time_line__pack_to_buffer
                     (const DayTimeLine   *message,
                      ProtobufCBuffer     *buffer);
DayTimeLine *
       day_time_line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   day_time_line__free_unpacked
                     (DayTimeLine *message,
                      ProtobufCAllocator *allocator);
/* TimeLampForm methods */
void   time_lamp_form__init
                     (TimeLampForm         *message);
size_t time_lamp_form__get_packed_size
                     (const TimeLampForm   *message);
size_t time_lamp_form__pack
                     (const TimeLampForm   *message,
                      uint8_t             *out);
size_t time_lamp_form__pack_to_buffer
                     (const TimeLampForm   *message,
                      ProtobufCBuffer     *buffer);
TimeLampForm *
       time_lamp_form__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   time_lamp_form__free_unpacked
                     (TimeLampForm *message,
                      ProtobufCAllocator *allocator);
/* DayLampForm methods */
void   day_lamp_form__init
                     (DayLampForm         *message);
size_t day_lamp_form__get_packed_size
                     (const DayLampForm   *message);
size_t day_lamp_form__pack
                     (const DayLampForm   *message,
                      uint8_t             *out);
size_t day_lamp_form__pack_to_buffer
                     (const DayLampForm   *message,
                      ProtobufCBuffer     *buffer);
DayLampForm *
       day_lamp_form__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   day_lamp_form__free_unpacked
                     (DayLampForm *message,
                      ProtobufCAllocator *allocator);
/* LaneState methods */
void   lane_state__init
                     (LaneState         *message);
size_t lane_state__get_packed_size
                     (const LaneState   *message);
size_t lane_state__pack
                     (const LaneState   *message,
                      uint8_t             *out);
size_t lane_state__pack_to_buffer
                     (const LaneState   *message,
                      ProtobufCBuffer     *buffer);
LaneState *
       lane_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lane_state__free_unpacked
                     (LaneState *message,
                      ProtobufCAllocator *allocator);
/* DeviceState methods */
void   device_state__init
                     (DeviceState         *message);
size_t device_state__get_packed_size
                     (const DeviceState   *message);
size_t device_state__pack
                     (const DeviceState   *message,
                      uint8_t             *out);
size_t device_state__pack_to_buffer
                     (const DeviceState   *message,
                      ProtobufCBuffer     *buffer);
DeviceState *
       device_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_state__free_unpacked
                     (DeviceState *message,
                      ProtobufCAllocator *allocator);
/* StatusCode methods */
void   status_code__init
                     (StatusCode         *message);
size_t status_code__get_packed_size
                     (const StatusCode   *message);
size_t status_code__pack
                     (const StatusCode   *message,
                      uint8_t             *out);
size_t status_code__pack_to_buffer
                     (const StatusCode   *message,
                      ProtobufCBuffer     *buffer);
StatusCode *
       status_code__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   status_code__free_unpacked
                     (StatusCode *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Account_Closure)
                 (const Account *message,
                  void *closure_data);
typedef void (*CPUParameter_Closure)
                 (const CPUParameter *message,
                  void *closure_data);
typedef void (*CPUScheduler_Closure)
                 (const CPUScheduler *message,
                  void *closure_data);
typedef void (*Device_Closure)
                 (const Device *message,
                  void *closure_data);
typedef void (*SignParam_Closure)
                 (const SignParam *message,
                  void *closure_data);
typedef void (*StationLaneLightConfig_Closure)
                 (const StationLaneLightConfig *message,
                  void *closure_data);
typedef void (*MeterItem_Closure)
                 (const MeterItem *message,
                  void *closure_data);
typedef void (*Station_Closure)
                 (const Station *message,
                  void *closure_data);
typedef void (*Accessory_Closure)
                 (const Accessory *message,
                  void *closure_data);
typedef void (*CardConfig_Closure)
                 (const CardConfig *message,
                  void *closure_data);
typedef void (*MTFCPhaseGateConfig_Closure)
                 (const MTFCPhaseGateConfig *message,
                  void *closure_data);
typedef void (*HMTime_Closure)
                 (const HMTime *message,
                  void *closure_data);
typedef void (*ActiveLamp_Closure)
                 (const ActiveLamp *message,
                  void *closure_data);
typedef void (*OneSideLampTime_Closure)
                 (const OneSideLampTime *message,
                  void *closure_data);
typedef void (*OneCycleLampTime_Closure)
                 (const OneCycleLampTime *message,
                  void *closure_data);
typedef void (*CycleLampForm_Closure)
                 (const CycleLampForm *message,
                  void *closure_data);
typedef void (*OneTimeline_Closure)
                 (const OneTimeline *message,
                  void *closure_data);
typedef void (*DayTimeLine_Closure)
                 (const DayTimeLine *message,
                  void *closure_data);
typedef void (*TimeLampForm_Closure)
                 (const TimeLampForm *message,
                  void *closure_data);
typedef void (*DayLampForm_Closure)
                 (const DayLampForm *message,
                  void *closure_data);
typedef void (*LaneState_Closure)
                 (const LaneState *message,
                  void *closure_data);
typedef void (*DeviceState_Closure)
                 (const DeviceState *message,
                  void *closure_data);
typedef void (*StatusCode_Closure)
                 (const StatusCode *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    device_type__descriptor;
extern const ProtobufCEnumDescriptor    account_role__descriptor;
extern const ProtobufCEnumDescriptor    connection_state__descriptor;
extern const ProtobufCEnumDescriptor    mtfcmain_work_state__descriptor;
extern const ProtobufCEnumDescriptor    pin_switch_profile__descriptor;
extern const ProtobufCEnumDescriptor    pin_out_profile__descriptor;
extern const ProtobufCEnumDescriptor    traffic_light_state__descriptor;
extern const ProtobufCEnumDescriptor    walking_state__descriptor;
extern const ProtobufCMessageDescriptor account__descriptor;
extern const ProtobufCMessageDescriptor cpuparameter__descriptor;
extern const ProtobufCMessageDescriptor cpuscheduler__descriptor;
extern const ProtobufCMessageDescriptor device__descriptor;
extern const ProtobufCMessageDescriptor sign_param__descriptor;
extern const ProtobufCMessageDescriptor station_lane_light_config__descriptor;
extern const ProtobufCMessageDescriptor meter_item__descriptor;
extern const ProtobufCMessageDescriptor station__descriptor;
extern const ProtobufCMessageDescriptor accessory__descriptor;
extern const ProtobufCMessageDescriptor card_config__descriptor;
extern const ProtobufCMessageDescriptor mtfcphase_gate_config__descriptor;
extern const ProtobufCMessageDescriptor hmtime__descriptor;
extern const ProtobufCMessageDescriptor active_lamp__descriptor;
extern const ProtobufCMessageDescriptor one_side_lamp_time__descriptor;
extern const ProtobufCMessageDescriptor one_cycle_lamp_time__descriptor;
extern const ProtobufCMessageDescriptor cycle_lamp_form__descriptor;
extern const ProtobufCMessageDescriptor one_timeline__descriptor;
extern const ProtobufCMessageDescriptor day_time_line__descriptor;
extern const ProtobufCMessageDescriptor time_lamp_form__descriptor;
extern const ProtobufCMessageDescriptor day_lamp_form__descriptor;
extern const ProtobufCMessageDescriptor lane_state__descriptor;
extern const ProtobufCMessageDescriptor device_state__descriptor;
extern const ProtobufCMessageDescriptor status_code__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_common_5fproto_2eproto__INCLUDED */

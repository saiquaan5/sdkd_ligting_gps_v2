/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: device_proto.proto */

#ifndef PROTOBUF_C_device_5fproto_2eproto__INCLUDED
#define PROTOBUF_C_device_5fproto_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common_proto.pb-c.h"

typedef struct _DeviceRegisterRequest DeviceRegisterRequest;
typedef struct _DeviceRegisterResponse DeviceRegisterResponse;
typedef struct _DeviceLoginRequest DeviceLoginRequest;
typedef struct _DeviceLoginResponse DeviceLoginResponse;
typedef struct _DeviceLogUpdate DeviceLogUpdate;
typedef struct _StateOnChangeDeviceMessage StateOnChangeDeviceMessage;
typedef struct _DeviceUpdateConfigureRequest DeviceUpdateConfigureRequest;
typedef struct _DeviceUpdateConfigureResponse DeviceUpdateConfigureResponse;
typedef struct _DeviceUpdateScheduleRequest DeviceUpdateScheduleRequest;
typedef struct _DeviceUpdateScheduleResponse DeviceUpdateScheduleResponse;
typedef struct _DeviceAuthMessage DeviceAuthMessage;
typedef struct _PingWebsocketDeviceRequest PingWebsocketDeviceRequest;
typedef struct _PingWebsocketDeviceResponse PingWebsocketDeviceResponse;
typedef struct _UpdateCoordinateDeviceRequest UpdateCoordinateDeviceRequest;
typedef struct _UpdateCoordinateDeviceResponse UpdateCoordinateDeviceResponse;
typedef struct _AnnounceErrorDeviceRequest AnnounceErrorDeviceRequest;
typedef struct _UpdatePowerStateDeviceRequest UpdatePowerStateDeviceRequest;
typedef struct _UpdateMeterDataDeviceRequest UpdateMeterDataDeviceRequest;
typedef struct _UpdateModeDeviceRequest UpdateModeDeviceRequest;
typedef struct _DeviceUpdateMessage DeviceUpdateMessage;
typedef struct _RequireStreamDeviceRequest RequireStreamDeviceRequest;
typedef struct _RequireStreamDeviceResponse RequireStreamDeviceResponse;
typedef struct _ControlLaneDeviceRequest ControlLaneDeviceRequest;
typedef struct _ControlLaneDeviceResponse ControlLaneDeviceResponse;
typedef struct _SetActiveTimeDeviceRequest SetActiveTimeDeviceRequest;
typedef struct _SetActiveTimeDeviceResponse SetActiveTimeDeviceResponse;
typedef struct _SetCycleConfigDeviceRequest SetCycleConfigDeviceRequest;
typedef struct _SyncTimeDeviceRequest SyncTimeDeviceRequest;
typedef struct _SyncTimeDeviceResponse SyncTimeDeviceResponse;
typedef struct _GetCoordinateDeviceRequest GetCoordinateDeviceRequest;
typedef struct _GetCoordinateDeviceResponse GetCoordinateDeviceResponse;
typedef struct _TriggerNotifyUserDeviceRequest TriggerNotifyUserDeviceRequest;
typedef struct _TriggerNotifyUserDeviceResponse TriggerNotifyUserDeviceResponse;
typedef struct _UpdateScheduleUserDeviceRequest UpdateScheduleUserDeviceRequest;
typedef struct _UpdateScheduleUserDeviceResponse UpdateScheduleUserDeviceResponse;
typedef struct _PowerControlUserRequest PowerControlUserRequest;
typedef struct _SetDeviceActiveTimeUserRequest SetDeviceActiveTimeUserRequest;
typedef struct _ForceOTAUpdateUserRequest ForceOTAUpdateUserRequest;
typedef struct _ReleaseControlUserRequest ReleaseControlUserRequest;
typedef struct _UserDeviceMessage UserDeviceMessage;
typedef struct _DeviceMessage DeviceMessage;


/* --- enums --- */


/* --- messages --- */

struct  _DeviceRegisterRequest
{
  ProtobufCMessage base;
  char *hardwareid;
  char *mantoken;
  DeviceType devicetype;
  uint32_t numphase;
  char *firmwareversion;
  char *cpuimei;
  float lat;
  float log;
  char *gatewayversion;
};
#define DEVICE_REGISTER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_register_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, DEVICE_TYPE__MTFC_AC, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string }


struct  _DeviceRegisterResponse
{
  ProtobufCMessage base;
  char *deviceid;
  StatusCode *statuscode;
};
#define DEVICE_REGISTER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_register_response__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _DeviceLoginRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *cpuimage;
};
#define DEVICE_LOGIN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_login_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _DeviceLoginResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DEVICE_LOGIN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_login_response__descriptor) \
    , NULL }


struct  _DeviceLogUpdate
{
  ProtobufCMessage base;
  char *deviceid;
  char *message;
};
#define DEVICE_LOG_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_log_update__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _StateOnChangeDeviceMessage
{
  ProtobufCMessage base;
  char *deviceid;
  DeviceState *update1second;
};
#define STATE_ON_CHANGE_DEVICE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state_on_change_device_message__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _DeviceUpdateConfigureRequest
{
  ProtobufCMessage base;
  char *deviceid;
  /*
   *Loai cpu _mtfc_cpu_type_t (1)
   */
  DeviceType type_cpu;
  /*
   *= true cho phép cpu chuyển sang chế độ đi bộ khi có tín hiệu đi bộ tích cực(1)
   */
  protobuf_c_boolean walking_mode_enable;
  /*
   *= true cho phép cpu chuyển sang chế độ kết nối đường sát khi có tín hiệu tích cực(1)
   */
  protobuf_c_boolean railway_mode_enable;
  /*
   *= true có kết nối bộ đo điện tại tủ(1)
   */
  protobuf_c_boolean power_meters_enable;
  /*
   *= true khóa ngõ vào điều khiển tại tủ khi có kết nối từ app
   */
  protobuf_c_boolean locked_hard_control_enable;
  /*
   *= true flashing đèn vàng khi ở chế độ off
   */
  protobuf_c_boolean is_flashing;
  /*
   *= true xuất tín hiệu ra cổng 485
   */
  protobuf_c_boolean is_enable_out485_lamp_port;
  /*
   *Thời gian trể tác động on khi có tín hiệu đường sắt
   */
  uint32_t railway_delay_on_time;
  /*
   *Thời gian trể khi tác động off khi có tín hiệu đường sắt
   */
  uint32_t railway_delay_off_time;
  /*
   *Thời gian tích cực của chế đô đi bộ
   */
  uint32_t walking_time;
  /*
   *Tọa độ trên map của thiết bị(1)
   */
  double latitude;
  /*
   *toa do trên map của thiết bị(1)
   */
  double longitude;
  /*
   *Thông số cài đặt card điều khiển
   */
  size_t n_index_card;
  CardConfig **index_card;
  /*
   *Thông số cài đặt ngõ ra
   */
  size_t n_phase_pin_config;
  MTFCPhaseGateConfig **phase_pin_config;
};
#define DEVICE_UPDATE_CONFIGURE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_update_configure_request__descriptor) \
    , (char *)protobuf_c_empty_string, DEVICE_TYPE__MTFC_AC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL }


struct  _DeviceUpdateConfigureResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DEVICE_UPDATE_CONFIGURE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_update_configure_response__descriptor) \
    , NULL }


struct  _DeviceUpdateScheduleRequest
{
  ProtobufCMessage base;
  char *deviceid;
  /*
   *Số pha hoạt động của CPU (1)
   */
  uint32_t num_side;
  /*
   *Thời gian CPU hoạt động chế độ đếm ngược ví dụ 5H00 đến 22h00 (2)
   */
  ActiveLamp *active_time;
  /*
   *Biểu mẫu thời gian xanh vàng đỏ (3)
   */
  CycleLampForm *cycle;
  /*
   *Biểu mẫu thời gian (4)
   */
  TimeLampForm *time;
  /*
   *Biểu mẫu trong tuần (5)
   */
  DayLampForm *days;
};
#define DEVICE_UPDATE_SCHEDULE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_update_schedule_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, NULL, NULL, NULL, NULL }


struct  _DeviceUpdateScheduleResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DEVICE_UPDATE_SCHEDULE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_update_schedule_response__descriptor) \
    , NULL }


struct  _DeviceAuthMessage
{
  ProtobufCMessage base;
  DeviceRegisterRequest *deviceregisterrequest;
  DeviceRegisterResponse *deviceregisterresponse;
  DeviceLoginRequest *deviceloginrequest;
  DeviceLoginResponse *deviceloginresponse;
};
#define DEVICE_AUTH_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_auth_message__descriptor) \
    , NULL, NULL, NULL, NULL }


struct  _PingWebsocketDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
};
#define PING_WEBSOCKET_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ping_websocket_device_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _PingWebsocketDeviceResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define PING_WEBSOCKET_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ping_websocket_device_response__descriptor) \
    , NULL }


struct  _UpdateCoordinateDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  float lat;
  float log;
};
#define UPDATE_COORDINATE_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_coordinate_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  _UpdateCoordinateDeviceResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_COORDINATE_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_coordinate_device_response__descriptor) \
    , NULL }


struct  _AnnounceErrorDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *message;
  char *email;
  char *phone;
};
#define ANNOUNCE_ERROR_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&announce_error_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _UpdatePowerStateDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  protobuf_c_boolean ison;
};
#define UPDATE_POWER_STATE_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_power_state_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _UpdateMeterDataDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  double v1;
  double v2;
  double v3;
  double i1;
  double i2;
  double i3;
  double p1;
  double p2;
  double p3;
  double a1;
  double a2;
  double a3;
  double power;
};
#define UPDATE_METER_DATA_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_meter_data_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _UpdateModeDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  MTFCMainWorkState mode;
};
#define UPDATE_MODE_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_mode_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, MTFCMAIN_WORK_STATE__MTFC_STATE_off }


struct  _DeviceUpdateMessage
{
  ProtobufCMessage base;
  DeviceLogUpdate *devicelogupdate;
  StateOnChangeDeviceMessage *stateonchange;
  DeviceUpdateConfigureRequest *deviceupdateconfigurerequest;
  DeviceUpdateConfigureResponse *deviceupdateconfigureresponse;
  PingWebsocketDeviceRequest *pingwebsocketdevicerequest;
  PingWebsocketDeviceResponse *pingwebsocketdeviceresponse;
  DeviceUpdateScheduleRequest *deviceupdateschedulerequest;
  DeviceUpdateScheduleResponse *deviceupdatescheduleresponse;
  UpdateCoordinateDeviceRequest *updatecoordinatedevicerequest;
  UpdateCoordinateDeviceResponse *updatecoordinatedeviceresponse;
  AnnounceErrorDeviceRequest *announceerrordevicerequest;
  UpdatePowerStateDeviceRequest *updatepowerstatedevicerequest;
  UpdateModeDeviceRequest *updatemodedevicerequest;
  UpdateMeterDataDeviceRequest *updatemeterdatadevicerequest;
};
#define DEVICE_UPDATE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_update_message__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _RequireStreamDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  protobuf_c_boolean enable;
};
#define REQUIRE_STREAM_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&require_stream_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _RequireStreamDeviceResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define REQUIRE_STREAM_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&require_stream_device_response__descriptor) \
    , NULL }


struct  _ControlLaneDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  uint32_t laneindex;
  protobuf_c_boolean ispoweron;
};
#define CONTROL_LANE_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&control_lane_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  _ControlLaneDeviceResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define CONTROL_LANE_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&control_lane_device_response__descriptor) \
    , NULL }


struct  _SetActiveTimeDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  ActiveLamp *activelamp;
};
#define SET_ACTIVE_TIME_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_time_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _SetActiveTimeDeviceResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SET_ACTIVE_TIME_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_time_device_response__descriptor) \
    , NULL }


struct  _SetCycleConfigDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  uint32_t numphase;
  uint32_t yellowtime;
  uint32_t clearancetime;
  size_t n_greentime;
  uint32_t *greentime;
};
#define SET_CYCLE_CONFIG_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_cycle_config_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0,NULL }


struct  _SyncTimeDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
};
#define SYNC_TIME_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_time_device_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _SyncTimeDeviceResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SYNC_TIME_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_time_device_response__descriptor) \
    , NULL }


struct  _GetCoordinateDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
};
#define GET_COORDINATE_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_coordinate_device_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _GetCoordinateDeviceResponse
{
  ProtobufCMessage base;
  float lat;
  float log;
  StatusCode *statuscode;
};
#define GET_COORDINATE_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_coordinate_device_response__descriptor) \
    , 0, 0, NULL }


struct  _TriggerNotifyUserDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *phone;
  char *email;
  char *message;
};
#define TRIGGER_NOTIFY_USER_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trigger_notify_user_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _TriggerNotifyUserDeviceResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define TRIGGER_NOTIFY_USER_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trigger_notify_user_device_response__descriptor) \
    , NULL }


struct  _UpdateScheduleUserDeviceRequest
{
  ProtobufCMessage base;
  char *deviceid;
  TimeLampForm *timelampform;
  CycleLampForm *cycle;
  DayLampForm *days;
  /*
   *Thời gian CPU hoạt động chế độ đếm ngược ví dụ 5H00 đến 22h00 (2)
   */
  ActiveLamp *active_time;
};
#define UPDATE_SCHEDULE_USER_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_schedule_user_device_request__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, NULL, NULL, NULL }


struct  _UpdateScheduleUserDeviceResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_SCHEDULE_USER_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_schedule_user_device_response__descriptor) \
    , NULL }


struct  _PowerControlUserRequest
{
  ProtobufCMessage base;
  char *deviceid;
  protobuf_c_boolean ispoweron;
};
#define POWER_CONTROL_USER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&power_control_user_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _SetDeviceActiveTimeUserRequest
{
  ProtobufCMessage base;
  char *deviceid;
  int32_t start_hour;
  int32_t start_minute;
  int32_t end_hour;
  int32_t end_minute;
};
#define SET_DEVICE_ACTIVE_TIME_USER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_device_active_time_user_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0 }


struct  _ForceOTAUpdateUserRequest
{
  ProtobufCMessage base;
  char *deviceid;
};
#define FORCE_OTAUPDATE_USER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&force_otaupdate_user_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _ReleaseControlUserRequest
{
  ProtobufCMessage base;
  char *deviceid;
};
#define RELEASE_CONTROL_USER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&release_control_user_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _UserDeviceMessage
{
  ProtobufCMessage base;
  RequireStreamDeviceRequest *requirestreamdevicerequest;
  RequireStreamDeviceResponse *requirestreamdeviceresponse;
  ControlLaneDeviceRequest *controllanedevicerequest;
  ControlLaneDeviceResponse *controllanedeviceresponse;
  SetActiveTimeDeviceRequest *setactivetimedevicerequest;
  SetActiveTimeDeviceResponse *setactivetimedeviceresponse;
  SetCycleConfigDeviceRequest *setcycleconfigdevicerequest;
  SyncTimeDeviceRequest *synctimedevicerequest;
  SyncTimeDeviceResponse *synctimedeviceresponse;
  GetCoordinateDeviceRequest *getcoordinatedevicerequest;
  GetCoordinateDeviceResponse *getcoordinatedeviceresponse;
  TriggerNotifyUserDeviceRequest *triggernotifyuserdevicerequest;
  TriggerNotifyUserDeviceResponse *triggernotifyuserdeviceresponse;
  UpdateScheduleUserDeviceRequest *updatescheduleuserdevicerequest;
  UpdateScheduleUserDeviceResponse *updatescheduleuserdeviceresponse;
  PowerControlUserRequest *powercontroluserrequest;
  ForceOTAUpdateUserRequest *forceotaupdateuserrequest;
  ReleaseControlUserRequest *releasecontroluserrequest;
};
#define USER_DEVICE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_device_message__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _DeviceMessage
{
  ProtobufCMessage base;
  DeviceAuthMessage *deviceauthmessage;
  DeviceUpdateMessage *deviceupdatemessage;
  UserDeviceMessage *userdevicemessage;
};
#define DEVICE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_message__descriptor) \
    , NULL, NULL, NULL }


/* DeviceRegisterRequest methods */
void   device_register_request__init
                     (DeviceRegisterRequest         *message);
size_t device_register_request__get_packed_size
                     (const DeviceRegisterRequest   *message);
size_t device_register_request__pack
                     (const DeviceRegisterRequest   *message,
                      uint8_t             *out);
size_t device_register_request__pack_to_buffer
                     (const DeviceRegisterRequest   *message,
                      ProtobufCBuffer     *buffer);
DeviceRegisterRequest *
       device_register_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_register_request__free_unpacked
                     (DeviceRegisterRequest *message,
                      ProtobufCAllocator *allocator);
/* DeviceRegisterResponse methods */
void   device_register_response__init
                     (DeviceRegisterResponse         *message);
size_t device_register_response__get_packed_size
                     (const DeviceRegisterResponse   *message);
size_t device_register_response__pack
                     (const DeviceRegisterResponse   *message,
                      uint8_t             *out);
size_t device_register_response__pack_to_buffer
                     (const DeviceRegisterResponse   *message,
                      ProtobufCBuffer     *buffer);
DeviceRegisterResponse *
       device_register_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_register_response__free_unpacked
                     (DeviceRegisterResponse *message,
                      ProtobufCAllocator *allocator);
/* DeviceLoginRequest methods */
void   device_login_request__init
                     (DeviceLoginRequest         *message);
size_t device_login_request__get_packed_size
                     (const DeviceLoginRequest   *message);
size_t device_login_request__pack
                     (const DeviceLoginRequest   *message,
                      uint8_t             *out);
size_t device_login_request__pack_to_buffer
                     (const DeviceLoginRequest   *message,
                      ProtobufCBuffer     *buffer);
DeviceLoginRequest *
       device_login_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_login_request__free_unpacked
                     (DeviceLoginRequest *message,
                      ProtobufCAllocator *allocator);
/* DeviceLoginResponse methods */
void   device_login_response__init
                     (DeviceLoginResponse         *message);
size_t device_login_response__get_packed_size
                     (const DeviceLoginResponse   *message);
size_t device_login_response__pack
                     (const DeviceLoginResponse   *message,
                      uint8_t             *out);
size_t device_login_response__pack_to_buffer
                     (const DeviceLoginResponse   *message,
                      ProtobufCBuffer     *buffer);
DeviceLoginResponse *
       device_login_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_login_response__free_unpacked
                     (DeviceLoginResponse *message,
                      ProtobufCAllocator *allocator);
/* DeviceLogUpdate methods */
void   device_log_update__init
                     (DeviceLogUpdate         *message);
size_t device_log_update__get_packed_size
                     (const DeviceLogUpdate   *message);
size_t device_log_update__pack
                     (const DeviceLogUpdate   *message,
                      uint8_t             *out);
size_t device_log_update__pack_to_buffer
                     (const DeviceLogUpdate   *message,
                      ProtobufCBuffer     *buffer);
DeviceLogUpdate *
       device_log_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_log_update__free_unpacked
                     (DeviceLogUpdate *message,
                      ProtobufCAllocator *allocator);
/* StateOnChangeDeviceMessage methods */
void   state_on_change_device_message__init
                     (StateOnChangeDeviceMessage         *message);
size_t state_on_change_device_message__get_packed_size
                     (const StateOnChangeDeviceMessage   *message);
size_t state_on_change_device_message__pack
                     (const StateOnChangeDeviceMessage   *message,
                      uint8_t             *out);
size_t state_on_change_device_message__pack_to_buffer
                     (const StateOnChangeDeviceMessage   *message,
                      ProtobufCBuffer     *buffer);
StateOnChangeDeviceMessage *
       state_on_change_device_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state_on_change_device_message__free_unpacked
                     (StateOnChangeDeviceMessage *message,
                      ProtobufCAllocator *allocator);
/* DeviceUpdateConfigureRequest methods */
void   device_update_configure_request__init
                     (DeviceUpdateConfigureRequest         *message);
size_t device_update_configure_request__get_packed_size
                     (const DeviceUpdateConfigureRequest   *message);
size_t device_update_configure_request__pack
                     (const DeviceUpdateConfigureRequest   *message,
                      uint8_t             *out);
size_t device_update_configure_request__pack_to_buffer
                     (const DeviceUpdateConfigureRequest   *message,
                      ProtobufCBuffer     *buffer);
DeviceUpdateConfigureRequest *
       device_update_configure_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_update_configure_request__free_unpacked
                     (DeviceUpdateConfigureRequest *message,
                      ProtobufCAllocator *allocator);
/* DeviceUpdateConfigureResponse methods */
void   device_update_configure_response__init
                     (DeviceUpdateConfigureResponse         *message);
size_t device_update_configure_response__get_packed_size
                     (const DeviceUpdateConfigureResponse   *message);
size_t device_update_configure_response__pack
                     (const DeviceUpdateConfigureResponse   *message,
                      uint8_t             *out);
size_t device_update_configure_response__pack_to_buffer
                     (const DeviceUpdateConfigureResponse   *message,
                      ProtobufCBuffer     *buffer);
DeviceUpdateConfigureResponse *
       device_update_configure_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_update_configure_response__free_unpacked
                     (DeviceUpdateConfigureResponse *message,
                      ProtobufCAllocator *allocator);
/* DeviceUpdateScheduleRequest methods */
void   device_update_schedule_request__init
                     (DeviceUpdateScheduleRequest         *message);
size_t device_update_schedule_request__get_packed_size
                     (const DeviceUpdateScheduleRequest   *message);
size_t device_update_schedule_request__pack
                     (const DeviceUpdateScheduleRequest   *message,
                      uint8_t             *out);
size_t device_update_schedule_request__pack_to_buffer
                     (const DeviceUpdateScheduleRequest   *message,
                      ProtobufCBuffer     *buffer);
DeviceUpdateScheduleRequest *
       device_update_schedule_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_update_schedule_request__free_unpacked
                     (DeviceUpdateScheduleRequest *message,
                      ProtobufCAllocator *allocator);
/* DeviceUpdateScheduleResponse methods */
void   device_update_schedule_response__init
                     (DeviceUpdateScheduleResponse         *message);
size_t device_update_schedule_response__get_packed_size
                     (const DeviceUpdateScheduleResponse   *message);
size_t device_update_schedule_response__pack
                     (const DeviceUpdateScheduleResponse   *message,
                      uint8_t             *out);
size_t device_update_schedule_response__pack_to_buffer
                     (const DeviceUpdateScheduleResponse   *message,
                      ProtobufCBuffer     *buffer);
DeviceUpdateScheduleResponse *
       device_update_schedule_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_update_schedule_response__free_unpacked
                     (DeviceUpdateScheduleResponse *message,
                      ProtobufCAllocator *allocator);
/* DeviceAuthMessage methods */
void   device_auth_message__init
                     (DeviceAuthMessage         *message);
size_t device_auth_message__get_packed_size
                     (const DeviceAuthMessage   *message);
size_t device_auth_message__pack
                     (const DeviceAuthMessage   *message,
                      uint8_t             *out);
size_t device_auth_message__pack_to_buffer
                     (const DeviceAuthMessage   *message,
                      ProtobufCBuffer     *buffer);
DeviceAuthMessage *
       device_auth_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_auth_message__free_unpacked
                     (DeviceAuthMessage *message,
                      ProtobufCAllocator *allocator);
/* PingWebsocketDeviceRequest methods */
void   ping_websocket_device_request__init
                     (PingWebsocketDeviceRequest         *message);
size_t ping_websocket_device_request__get_packed_size
                     (const PingWebsocketDeviceRequest   *message);
size_t ping_websocket_device_request__pack
                     (const PingWebsocketDeviceRequest   *message,
                      uint8_t             *out);
size_t ping_websocket_device_request__pack_to_buffer
                     (const PingWebsocketDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
PingWebsocketDeviceRequest *
       ping_websocket_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ping_websocket_device_request__free_unpacked
                     (PingWebsocketDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* PingWebsocketDeviceResponse methods */
void   ping_websocket_device_response__init
                     (PingWebsocketDeviceResponse         *message);
size_t ping_websocket_device_response__get_packed_size
                     (const PingWebsocketDeviceResponse   *message);
size_t ping_websocket_device_response__pack
                     (const PingWebsocketDeviceResponse   *message,
                      uint8_t             *out);
size_t ping_websocket_device_response__pack_to_buffer
                     (const PingWebsocketDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
PingWebsocketDeviceResponse *
       ping_websocket_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ping_websocket_device_response__free_unpacked
                     (PingWebsocketDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateCoordinateDeviceRequest methods */
void   update_coordinate_device_request__init
                     (UpdateCoordinateDeviceRequest         *message);
size_t update_coordinate_device_request__get_packed_size
                     (const UpdateCoordinateDeviceRequest   *message);
size_t update_coordinate_device_request__pack
                     (const UpdateCoordinateDeviceRequest   *message,
                      uint8_t             *out);
size_t update_coordinate_device_request__pack_to_buffer
                     (const UpdateCoordinateDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateCoordinateDeviceRequest *
       update_coordinate_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_coordinate_device_request__free_unpacked
                     (UpdateCoordinateDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateCoordinateDeviceResponse methods */
void   update_coordinate_device_response__init
                     (UpdateCoordinateDeviceResponse         *message);
size_t update_coordinate_device_response__get_packed_size
                     (const UpdateCoordinateDeviceResponse   *message);
size_t update_coordinate_device_response__pack
                     (const UpdateCoordinateDeviceResponse   *message,
                      uint8_t             *out);
size_t update_coordinate_device_response__pack_to_buffer
                     (const UpdateCoordinateDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateCoordinateDeviceResponse *
       update_coordinate_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_coordinate_device_response__free_unpacked
                     (UpdateCoordinateDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* AnnounceErrorDeviceRequest methods */
void   announce_error_device_request__init
                     (AnnounceErrorDeviceRequest         *message);
size_t announce_error_device_request__get_packed_size
                     (const AnnounceErrorDeviceRequest   *message);
size_t announce_error_device_request__pack
                     (const AnnounceErrorDeviceRequest   *message,
                      uint8_t             *out);
size_t announce_error_device_request__pack_to_buffer
                     (const AnnounceErrorDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
AnnounceErrorDeviceRequest *
       announce_error_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   announce_error_device_request__free_unpacked
                     (AnnounceErrorDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdatePowerStateDeviceRequest methods */
void   update_power_state_device_request__init
                     (UpdatePowerStateDeviceRequest         *message);
size_t update_power_state_device_request__get_packed_size
                     (const UpdatePowerStateDeviceRequest   *message);
size_t update_power_state_device_request__pack
                     (const UpdatePowerStateDeviceRequest   *message,
                      uint8_t             *out);
size_t update_power_state_device_request__pack_to_buffer
                     (const UpdatePowerStateDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdatePowerStateDeviceRequest *
       update_power_state_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_power_state_device_request__free_unpacked
                     (UpdatePowerStateDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateMeterDataDeviceRequest methods */
void   update_meter_data_device_request__init
                     (UpdateMeterDataDeviceRequest         *message);
size_t update_meter_data_device_request__get_packed_size
                     (const UpdateMeterDataDeviceRequest   *message);
size_t update_meter_data_device_request__pack
                     (const UpdateMeterDataDeviceRequest   *message,
                      uint8_t             *out);
size_t update_meter_data_device_request__pack_to_buffer
                     (const UpdateMeterDataDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateMeterDataDeviceRequest *
       update_meter_data_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_meter_data_device_request__free_unpacked
                     (UpdateMeterDataDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateModeDeviceRequest methods */
void   update_mode_device_request__init
                     (UpdateModeDeviceRequest         *message);
size_t update_mode_device_request__get_packed_size
                     (const UpdateModeDeviceRequest   *message);
size_t update_mode_device_request__pack
                     (const UpdateModeDeviceRequest   *message,
                      uint8_t             *out);
size_t update_mode_device_request__pack_to_buffer
                     (const UpdateModeDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateModeDeviceRequest *
       update_mode_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_mode_device_request__free_unpacked
                     (UpdateModeDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* DeviceUpdateMessage methods */
void   device_update_message__init
                     (DeviceUpdateMessage         *message);
size_t device_update_message__get_packed_size
                     (const DeviceUpdateMessage   *message);
size_t device_update_message__pack
                     (const DeviceUpdateMessage   *message,
                      uint8_t             *out);
size_t device_update_message__pack_to_buffer
                     (const DeviceUpdateMessage   *message,
                      ProtobufCBuffer     *buffer);
DeviceUpdateMessage *
       device_update_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_update_message__free_unpacked
                     (DeviceUpdateMessage *message,
                      ProtobufCAllocator *allocator);
/* RequireStreamDeviceRequest methods */
void   require_stream_device_request__init
                     (RequireStreamDeviceRequest         *message);
size_t require_stream_device_request__get_packed_size
                     (const RequireStreamDeviceRequest   *message);
size_t require_stream_device_request__pack
                     (const RequireStreamDeviceRequest   *message,
                      uint8_t             *out);
size_t require_stream_device_request__pack_to_buffer
                     (const RequireStreamDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
RequireStreamDeviceRequest *
       require_stream_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   require_stream_device_request__free_unpacked
                     (RequireStreamDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* RequireStreamDeviceResponse methods */
void   require_stream_device_response__init
                     (RequireStreamDeviceResponse         *message);
size_t require_stream_device_response__get_packed_size
                     (const RequireStreamDeviceResponse   *message);
size_t require_stream_device_response__pack
                     (const RequireStreamDeviceResponse   *message,
                      uint8_t             *out);
size_t require_stream_device_response__pack_to_buffer
                     (const RequireStreamDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
RequireStreamDeviceResponse *
       require_stream_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   require_stream_device_response__free_unpacked
                     (RequireStreamDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* ControlLaneDeviceRequest methods */
void   control_lane_device_request__init
                     (ControlLaneDeviceRequest         *message);
size_t control_lane_device_request__get_packed_size
                     (const ControlLaneDeviceRequest   *message);
size_t control_lane_device_request__pack
                     (const ControlLaneDeviceRequest   *message,
                      uint8_t             *out);
size_t control_lane_device_request__pack_to_buffer
                     (const ControlLaneDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
ControlLaneDeviceRequest *
       control_lane_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   control_lane_device_request__free_unpacked
                     (ControlLaneDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* ControlLaneDeviceResponse methods */
void   control_lane_device_response__init
                     (ControlLaneDeviceResponse         *message);
size_t control_lane_device_response__get_packed_size
                     (const ControlLaneDeviceResponse   *message);
size_t control_lane_device_response__pack
                     (const ControlLaneDeviceResponse   *message,
                      uint8_t             *out);
size_t control_lane_device_response__pack_to_buffer
                     (const ControlLaneDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
ControlLaneDeviceResponse *
       control_lane_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   control_lane_device_response__free_unpacked
                     (ControlLaneDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* SetActiveTimeDeviceRequest methods */
void   set_active_time_device_request__init
                     (SetActiveTimeDeviceRequest         *message);
size_t set_active_time_device_request__get_packed_size
                     (const SetActiveTimeDeviceRequest   *message);
size_t set_active_time_device_request__pack
                     (const SetActiveTimeDeviceRequest   *message,
                      uint8_t             *out);
size_t set_active_time_device_request__pack_to_buffer
                     (const SetActiveTimeDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
SetActiveTimeDeviceRequest *
       set_active_time_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_time_device_request__free_unpacked
                     (SetActiveTimeDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* SetActiveTimeDeviceResponse methods */
void   set_active_time_device_response__init
                     (SetActiveTimeDeviceResponse         *message);
size_t set_active_time_device_response__get_packed_size
                     (const SetActiveTimeDeviceResponse   *message);
size_t set_active_time_device_response__pack
                     (const SetActiveTimeDeviceResponse   *message,
                      uint8_t             *out);
size_t set_active_time_device_response__pack_to_buffer
                     (const SetActiveTimeDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
SetActiveTimeDeviceResponse *
       set_active_time_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_time_device_response__free_unpacked
                     (SetActiveTimeDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* SetCycleConfigDeviceRequest methods */
void   set_cycle_config_device_request__init
                     (SetCycleConfigDeviceRequest         *message);
size_t set_cycle_config_device_request__get_packed_size
                     (const SetCycleConfigDeviceRequest   *message);
size_t set_cycle_config_device_request__pack
                     (const SetCycleConfigDeviceRequest   *message,
                      uint8_t             *out);
size_t set_cycle_config_device_request__pack_to_buffer
                     (const SetCycleConfigDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
SetCycleConfigDeviceRequest *
       set_cycle_config_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_cycle_config_device_request__free_unpacked
                     (SetCycleConfigDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* SyncTimeDeviceRequest methods */
void   sync_time_device_request__init
                     (SyncTimeDeviceRequest         *message);
size_t sync_time_device_request__get_packed_size
                     (const SyncTimeDeviceRequest   *message);
size_t sync_time_device_request__pack
                     (const SyncTimeDeviceRequest   *message,
                      uint8_t             *out);
size_t sync_time_device_request__pack_to_buffer
                     (const SyncTimeDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
SyncTimeDeviceRequest *
       sync_time_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync_time_device_request__free_unpacked
                     (SyncTimeDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* SyncTimeDeviceResponse methods */
void   sync_time_device_response__init
                     (SyncTimeDeviceResponse         *message);
size_t sync_time_device_response__get_packed_size
                     (const SyncTimeDeviceResponse   *message);
size_t sync_time_device_response__pack
                     (const SyncTimeDeviceResponse   *message,
                      uint8_t             *out);
size_t sync_time_device_response__pack_to_buffer
                     (const SyncTimeDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
SyncTimeDeviceResponse *
       sync_time_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync_time_device_response__free_unpacked
                     (SyncTimeDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCoordinateDeviceRequest methods */
void   get_coordinate_device_request__init
                     (GetCoordinateDeviceRequest         *message);
size_t get_coordinate_device_request__get_packed_size
                     (const GetCoordinateDeviceRequest   *message);
size_t get_coordinate_device_request__pack
                     (const GetCoordinateDeviceRequest   *message,
                      uint8_t             *out);
size_t get_coordinate_device_request__pack_to_buffer
                     (const GetCoordinateDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCoordinateDeviceRequest *
       get_coordinate_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_coordinate_device_request__free_unpacked
                     (GetCoordinateDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCoordinateDeviceResponse methods */
void   get_coordinate_device_response__init
                     (GetCoordinateDeviceResponse         *message);
size_t get_coordinate_device_response__get_packed_size
                     (const GetCoordinateDeviceResponse   *message);
size_t get_coordinate_device_response__pack
                     (const GetCoordinateDeviceResponse   *message,
                      uint8_t             *out);
size_t get_coordinate_device_response__pack_to_buffer
                     (const GetCoordinateDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCoordinateDeviceResponse *
       get_coordinate_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_coordinate_device_response__free_unpacked
                     (GetCoordinateDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* TriggerNotifyUserDeviceRequest methods */
void   trigger_notify_user_device_request__init
                     (TriggerNotifyUserDeviceRequest         *message);
size_t trigger_notify_user_device_request__get_packed_size
                     (const TriggerNotifyUserDeviceRequest   *message);
size_t trigger_notify_user_device_request__pack
                     (const TriggerNotifyUserDeviceRequest   *message,
                      uint8_t             *out);
size_t trigger_notify_user_device_request__pack_to_buffer
                     (const TriggerNotifyUserDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
TriggerNotifyUserDeviceRequest *
       trigger_notify_user_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trigger_notify_user_device_request__free_unpacked
                     (TriggerNotifyUserDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* TriggerNotifyUserDeviceResponse methods */
void   trigger_notify_user_device_response__init
                     (TriggerNotifyUserDeviceResponse         *message);
size_t trigger_notify_user_device_response__get_packed_size
                     (const TriggerNotifyUserDeviceResponse   *message);
size_t trigger_notify_user_device_response__pack
                     (const TriggerNotifyUserDeviceResponse   *message,
                      uint8_t             *out);
size_t trigger_notify_user_device_response__pack_to_buffer
                     (const TriggerNotifyUserDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
TriggerNotifyUserDeviceResponse *
       trigger_notify_user_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trigger_notify_user_device_response__free_unpacked
                     (TriggerNotifyUserDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateScheduleUserDeviceRequest methods */
void   update_schedule_user_device_request__init
                     (UpdateScheduleUserDeviceRequest         *message);
size_t update_schedule_user_device_request__get_packed_size
                     (const UpdateScheduleUserDeviceRequest   *message);
size_t update_schedule_user_device_request__pack
                     (const UpdateScheduleUserDeviceRequest   *message,
                      uint8_t             *out);
size_t update_schedule_user_device_request__pack_to_buffer
                     (const UpdateScheduleUserDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateScheduleUserDeviceRequest *
       update_schedule_user_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_schedule_user_device_request__free_unpacked
                     (UpdateScheduleUserDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateScheduleUserDeviceResponse methods */
void   update_schedule_user_device_response__init
                     (UpdateScheduleUserDeviceResponse         *message);
size_t update_schedule_user_device_response__get_packed_size
                     (const UpdateScheduleUserDeviceResponse   *message);
size_t update_schedule_user_device_response__pack
                     (const UpdateScheduleUserDeviceResponse   *message,
                      uint8_t             *out);
size_t update_schedule_user_device_response__pack_to_buffer
                     (const UpdateScheduleUserDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateScheduleUserDeviceResponse *
       update_schedule_user_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_schedule_user_device_response__free_unpacked
                     (UpdateScheduleUserDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* PowerControlUserRequest methods */
void   power_control_user_request__init
                     (PowerControlUserRequest         *message);
size_t power_control_user_request__get_packed_size
                     (const PowerControlUserRequest   *message);
size_t power_control_user_request__pack
                     (const PowerControlUserRequest   *message,
                      uint8_t             *out);
size_t power_control_user_request__pack_to_buffer
                     (const PowerControlUserRequest   *message,
                      ProtobufCBuffer     *buffer);
PowerControlUserRequest *
       power_control_user_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   power_control_user_request__free_unpacked
                     (PowerControlUserRequest *message,
                      ProtobufCAllocator *allocator);
/* SetDeviceActiveTimeUserRequest methods */
void   set_device_active_time_user_request__init
                     (SetDeviceActiveTimeUserRequest         *message);
size_t set_device_active_time_user_request__get_packed_size
                     (const SetDeviceActiveTimeUserRequest   *message);
size_t set_device_active_time_user_request__pack
                     (const SetDeviceActiveTimeUserRequest   *message,
                      uint8_t             *out);
size_t set_device_active_time_user_request__pack_to_buffer
                     (const SetDeviceActiveTimeUserRequest   *message,
                      ProtobufCBuffer     *buffer);
SetDeviceActiveTimeUserRequest *
       set_device_active_time_user_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_device_active_time_user_request__free_unpacked
                     (SetDeviceActiveTimeUserRequest *message,
                      ProtobufCAllocator *allocator);
/* ForceOTAUpdateUserRequest methods */
void   force_otaupdate_user_request__init
                     (ForceOTAUpdateUserRequest         *message);
size_t force_otaupdate_user_request__get_packed_size
                     (const ForceOTAUpdateUserRequest   *message);
size_t force_otaupdate_user_request__pack
                     (const ForceOTAUpdateUserRequest   *message,
                      uint8_t             *out);
size_t force_otaupdate_user_request__pack_to_buffer
                     (const ForceOTAUpdateUserRequest   *message,
                      ProtobufCBuffer     *buffer);
ForceOTAUpdateUserRequest *
       force_otaupdate_user_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   force_otaupdate_user_request__free_unpacked
                     (ForceOTAUpdateUserRequest *message,
                      ProtobufCAllocator *allocator);
/* ReleaseControlUserRequest methods */
void   release_control_user_request__init
                     (ReleaseControlUserRequest         *message);
size_t release_control_user_request__get_packed_size
                     (const ReleaseControlUserRequest   *message);
size_t release_control_user_request__pack
                     (const ReleaseControlUserRequest   *message,
                      uint8_t             *out);
size_t release_control_user_request__pack_to_buffer
                     (const ReleaseControlUserRequest   *message,
                      ProtobufCBuffer     *buffer);
ReleaseControlUserRequest *
       release_control_user_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   release_control_user_request__free_unpacked
                     (ReleaseControlUserRequest *message,
                      ProtobufCAllocator *allocator);
/* UserDeviceMessage methods */
void   user_device_message__init
                     (UserDeviceMessage         *message);
size_t user_device_message__get_packed_size
                     (const UserDeviceMessage   *message);
size_t user_device_message__pack
                     (const UserDeviceMessage   *message,
                      uint8_t             *out);
size_t user_device_message__pack_to_buffer
                     (const UserDeviceMessage   *message,
                      ProtobufCBuffer     *buffer);
UserDeviceMessage *
       user_device_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_device_message__free_unpacked
                     (UserDeviceMessage *message,
                      ProtobufCAllocator *allocator);
/* DeviceMessage methods */
void   device_message__init
                     (DeviceMessage         *message);
size_t device_message__get_packed_size
                     (const DeviceMessage   *message);
size_t device_message__pack
                     (const DeviceMessage   *message,
                      uint8_t             *out);
size_t device_message__pack_to_buffer
                     (const DeviceMessage   *message,
                      ProtobufCBuffer     *buffer);
DeviceMessage *
       device_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_message__free_unpacked
                     (DeviceMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DeviceRegisterRequest_Closure)
                 (const DeviceRegisterRequest *message,
                  void *closure_data);
typedef void (*DeviceRegisterResponse_Closure)
                 (const DeviceRegisterResponse *message,
                  void *closure_data);
typedef void (*DeviceLoginRequest_Closure)
                 (const DeviceLoginRequest *message,
                  void *closure_data);
typedef void (*DeviceLoginResponse_Closure)
                 (const DeviceLoginResponse *message,
                  void *closure_data);
typedef void (*DeviceLogUpdate_Closure)
                 (const DeviceLogUpdate *message,
                  void *closure_data);
typedef void (*StateOnChangeDeviceMessage_Closure)
                 (const StateOnChangeDeviceMessage *message,
                  void *closure_data);
typedef void (*DeviceUpdateConfigureRequest_Closure)
                 (const DeviceUpdateConfigureRequest *message,
                  void *closure_data);
typedef void (*DeviceUpdateConfigureResponse_Closure)
                 (const DeviceUpdateConfigureResponse *message,
                  void *closure_data);
typedef void (*DeviceUpdateScheduleRequest_Closure)
                 (const DeviceUpdateScheduleRequest *message,
                  void *closure_data);
typedef void (*DeviceUpdateScheduleResponse_Closure)
                 (const DeviceUpdateScheduleResponse *message,
                  void *closure_data);
typedef void (*DeviceAuthMessage_Closure)
                 (const DeviceAuthMessage *message,
                  void *closure_data);
typedef void (*PingWebsocketDeviceRequest_Closure)
                 (const PingWebsocketDeviceRequest *message,
                  void *closure_data);
typedef void (*PingWebsocketDeviceResponse_Closure)
                 (const PingWebsocketDeviceResponse *message,
                  void *closure_data);
typedef void (*UpdateCoordinateDeviceRequest_Closure)
                 (const UpdateCoordinateDeviceRequest *message,
                  void *closure_data);
typedef void (*UpdateCoordinateDeviceResponse_Closure)
                 (const UpdateCoordinateDeviceResponse *message,
                  void *closure_data);
typedef void (*AnnounceErrorDeviceRequest_Closure)
                 (const AnnounceErrorDeviceRequest *message,
                  void *closure_data);
typedef void (*UpdatePowerStateDeviceRequest_Closure)
                 (const UpdatePowerStateDeviceRequest *message,
                  void *closure_data);
typedef void (*UpdateMeterDataDeviceRequest_Closure)
                 (const UpdateMeterDataDeviceRequest *message,
                  void *closure_data);
typedef void (*UpdateModeDeviceRequest_Closure)
                 (const UpdateModeDeviceRequest *message,
                  void *closure_data);
typedef void (*DeviceUpdateMessage_Closure)
                 (const DeviceUpdateMessage *message,
                  void *closure_data);
typedef void (*RequireStreamDeviceRequest_Closure)
                 (const RequireStreamDeviceRequest *message,
                  void *closure_data);
typedef void (*RequireStreamDeviceResponse_Closure)
                 (const RequireStreamDeviceResponse *message,
                  void *closure_data);
typedef void (*ControlLaneDeviceRequest_Closure)
                 (const ControlLaneDeviceRequest *message,
                  void *closure_data);
typedef void (*ControlLaneDeviceResponse_Closure)
                 (const ControlLaneDeviceResponse *message,
                  void *closure_data);
typedef void (*SetActiveTimeDeviceRequest_Closure)
                 (const SetActiveTimeDeviceRequest *message,
                  void *closure_data);
typedef void (*SetActiveTimeDeviceResponse_Closure)
                 (const SetActiveTimeDeviceResponse *message,
                  void *closure_data);
typedef void (*SetCycleConfigDeviceRequest_Closure)
                 (const SetCycleConfigDeviceRequest *message,
                  void *closure_data);
typedef void (*SyncTimeDeviceRequest_Closure)
                 (const SyncTimeDeviceRequest *message,
                  void *closure_data);
typedef void (*SyncTimeDeviceResponse_Closure)
                 (const SyncTimeDeviceResponse *message,
                  void *closure_data);
typedef void (*GetCoordinateDeviceRequest_Closure)
                 (const GetCoordinateDeviceRequest *message,
                  void *closure_data);
typedef void (*GetCoordinateDeviceResponse_Closure)
                 (const GetCoordinateDeviceResponse *message,
                  void *closure_data);
typedef void (*TriggerNotifyUserDeviceRequest_Closure)
                 (const TriggerNotifyUserDeviceRequest *message,
                  void *closure_data);
typedef void (*TriggerNotifyUserDeviceResponse_Closure)
                 (const TriggerNotifyUserDeviceResponse *message,
                  void *closure_data);
typedef void (*UpdateScheduleUserDeviceRequest_Closure)
                 (const UpdateScheduleUserDeviceRequest *message,
                  void *closure_data);
typedef void (*UpdateScheduleUserDeviceResponse_Closure)
                 (const UpdateScheduleUserDeviceResponse *message,
                  void *closure_data);
typedef void (*PowerControlUserRequest_Closure)
                 (const PowerControlUserRequest *message,
                  void *closure_data);
typedef void (*SetDeviceActiveTimeUserRequest_Closure)
                 (const SetDeviceActiveTimeUserRequest *message,
                  void *closure_data);
typedef void (*ForceOTAUpdateUserRequest_Closure)
                 (const ForceOTAUpdateUserRequest *message,
                  void *closure_data);
typedef void (*ReleaseControlUserRequest_Closure)
                 (const ReleaseControlUserRequest *message,
                  void *closure_data);
typedef void (*UserDeviceMessage_Closure)
                 (const UserDeviceMessage *message,
                  void *closure_data);
typedef void (*DeviceMessage_Closure)
                 (const DeviceMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor device_register_request__descriptor;
extern const ProtobufCMessageDescriptor device_register_response__descriptor;
extern const ProtobufCMessageDescriptor device_login_request__descriptor;
extern const ProtobufCMessageDescriptor device_login_response__descriptor;
extern const ProtobufCMessageDescriptor device_log_update__descriptor;
extern const ProtobufCMessageDescriptor state_on_change_device_message__descriptor;
extern const ProtobufCMessageDescriptor device_update_configure_request__descriptor;
extern const ProtobufCMessageDescriptor device_update_configure_response__descriptor;
extern const ProtobufCMessageDescriptor device_update_schedule_request__descriptor;
extern const ProtobufCMessageDescriptor device_update_schedule_response__descriptor;
extern const ProtobufCMessageDescriptor device_auth_message__descriptor;
extern const ProtobufCMessageDescriptor ping_websocket_device_request__descriptor;
extern const ProtobufCMessageDescriptor ping_websocket_device_response__descriptor;
extern const ProtobufCMessageDescriptor update_coordinate_device_request__descriptor;
extern const ProtobufCMessageDescriptor update_coordinate_device_response__descriptor;
extern const ProtobufCMessageDescriptor announce_error_device_request__descriptor;
extern const ProtobufCMessageDescriptor update_power_state_device_request__descriptor;
extern const ProtobufCMessageDescriptor update_meter_data_device_request__descriptor;
extern const ProtobufCMessageDescriptor update_mode_device_request__descriptor;
extern const ProtobufCMessageDescriptor device_update_message__descriptor;
extern const ProtobufCMessageDescriptor require_stream_device_request__descriptor;
extern const ProtobufCMessageDescriptor require_stream_device_response__descriptor;
extern const ProtobufCMessageDescriptor control_lane_device_request__descriptor;
extern const ProtobufCMessageDescriptor control_lane_device_response__descriptor;
extern const ProtobufCMessageDescriptor set_active_time_device_request__descriptor;
extern const ProtobufCMessageDescriptor set_active_time_device_response__descriptor;
extern const ProtobufCMessageDescriptor set_cycle_config_device_request__descriptor;
extern const ProtobufCMessageDescriptor sync_time_device_request__descriptor;
extern const ProtobufCMessageDescriptor sync_time_device_response__descriptor;
extern const ProtobufCMessageDescriptor get_coordinate_device_request__descriptor;
extern const ProtobufCMessageDescriptor get_coordinate_device_response__descriptor;
extern const ProtobufCMessageDescriptor trigger_notify_user_device_request__descriptor;
extern const ProtobufCMessageDescriptor trigger_notify_user_device_response__descriptor;
extern const ProtobufCMessageDescriptor update_schedule_user_device_request__descriptor;
extern const ProtobufCMessageDescriptor update_schedule_user_device_response__descriptor;
extern const ProtobufCMessageDescriptor power_control_user_request__descriptor;
extern const ProtobufCMessageDescriptor set_device_active_time_user_request__descriptor;
extern const ProtobufCMessageDescriptor force_otaupdate_user_request__descriptor;
extern const ProtobufCMessageDescriptor release_control_user_request__descriptor;
extern const ProtobufCMessageDescriptor user_device_message__descriptor;
extern const ProtobufCMessageDescriptor device_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_device_5fproto_2eproto__INCLUDED */
